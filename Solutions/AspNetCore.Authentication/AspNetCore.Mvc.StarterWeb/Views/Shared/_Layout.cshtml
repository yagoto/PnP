<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - AspNet5.Mvc6.StarterWeb</title>

    <environment names="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/css/site.css" />
    </environment>
    <environment names="Staging,Production">
        <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.5/css/bootstrap.min.css"
              asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute" />
        <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" />
    </environment>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a asp-controller="Home" asp-action="Index" class="navbar-brand">AspNet5.Mvc6.StarterWeb</a>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a asp-controller="Home" asp-action="Index">Home</a></li>
                    <li><a asp-controller="Home" asp-action="About">About</a></li>
                    <li><a asp-controller="Home" asp-action="Contact">Contact</a></li>
                    <li><a asp-controller="Lists" asp-action="Index">Get SharePoint Lists</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; 2016 - AspNet5.Mvc6.StarterWeb</p>
        </footer>
    </div>

    <environment names="Development">
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-2.1.4.min.js"
                asp-fallback-src="~/lib/jquery/dist/jquery.min.js"
                asp-fallback-test="window.jQuery">
        </script>
        <script src="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.5/bootstrap.min.js"
                asp-fallback-src="~/lib/bootstrap/dist/js/bootstrap.min.js"
                asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal">
        </script>
        <script src="~/js/site.min.js" asp-append-version="true"></script>
    </environment>
    <script>
            //TODO: move this to a spcontext.js file
            (function (window, undefined) {

                "use strict";

                var $ = window.jQuery;
                var document = window.document;

                // SPHostUrl parameter name
                var SPHostUrlKey = "SPHostUrl";

                // Gets SPHostUrl from the current URL and appends it as query string to the links which point to current domain in the page.
                $(document).ready(function () {
                    ensureSPHasRedirectedToSharePointRemoved();

                    var spHostUrl = getSPHostUrlFromQueryString(window.location.search);
                    var currentAuthority = getAuthorityFromUrl(window.location.href).toUpperCase();

                    if (spHostUrl && currentAuthority) {
                        appendSPHostUrlToLinks(spHostUrl, currentAuthority);
                    }
                });

                // Appends SPHostUrl as query string to all the links which point to current domain.
                function appendSPHostUrlToLinks(spHostUrl, currentAuthority) {
                    $("a")
                        .filter(function () {
                            var authority = getAuthorityFromUrl(this.href);
                            if (!authority && /^#|:/.test(this.href)) {
                                // Filters out anchors and urls with other unsupported protocols.
                                return false;
                            }
                            return authority.toUpperCase() == currentAuthority;
                        })
                        .each(function () {
                            if (!getSPHostUrlFromQueryString(this.search)) {
                                if (this.search.length > 0) {
                                    this.search += "&" + SPHostUrlKey + "=" + spHostUrl;
                                }
                                else {
                                    this.search = "?" + SPHostUrlKey + "=" + spHostUrl;
                                }
                            }
                        });
                }

                // Gets SPHostUrl from the given query string.
                function getSPHostUrlFromQueryString(queryString) {
                    if (queryString) {
                        if (queryString[0] === "?") {
                            queryString = queryString.substring(1);
                        }

                        var keyValuePairArray = queryString.split("&");

                        for (var i = 0; i < keyValuePairArray.length; i++) {
                            var currentKeyValuePair = keyValuePairArray[i].split("=");

                            if (currentKeyValuePair.length > 1 && currentKeyValuePair[0] == SPHostUrlKey) {
                                return currentKeyValuePair[1];
                            }
                        }
                    }

                    return null;
                }

                // Gets authority from the given url when it is an absolute url with http/https protocol or a protocol relative url.
                function getAuthorityFromUrl(url) {
                    if (url) {
                        var match = /^(?:https:\/\/|http:\/\/|\/\/)([^\/\?#]+)(?:\/|#|$|\?)/i.exec(url);
                        if (match) {
                            return match[1];
                        }
                    }
                    return null;
                }

                // If SPHasRedirectedToSharePoint exists in the query string, remove it.
                // Hence, when user bookmarks the url, SPHasRedirectedToSharePoint will not be included.
                // Note that modifying window.location.search will cause an additional request to server.
                function ensureSPHasRedirectedToSharePointRemoved() {
                    var SPHasRedirectedToSharePointParam = "&SPHasRedirectedToSharePoint=1";

                    var queryString = window.location.search;

                    if (queryString.indexOf(SPHasRedirectedToSharePointParam) >= 0) {
                        window.location.search = queryString.replace(SPHasRedirectedToSharePointParam, "");
                    }
                }

            })(window);
    </script>
    @RenderSection("scripts", required: false)
</body>
</html>
